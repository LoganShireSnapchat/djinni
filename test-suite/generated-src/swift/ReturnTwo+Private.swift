// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from multiple_inheritance.djinni

import DjinniSupport
import DjinniSupportCxx
import Foundation
import TestSuite
import TestSuiteCxx

/** Used for C++ multiple inheritance tests */
final class ReturnTwoCppProxy: DjinniSupport.CppProxy, TestSuite.ReturnTwo {
    init(_ inst: djinni.swift.AnyValue) { super.init(inst:inst) } 
    func returnTwo() throws -> Int8 {
        var params = djinni.swift.ParameterList()
        params.addValue(inst)
        var ret = djinni_generated.ReturnTwo_returnTwo(&params)
        try handleCppErrors(&ret)
        return I8Marshaller.fromCpp(ret)
    }
}
enum ReturnTwoMarshaller: DjinniSupport.Marshaller {
    typealias SwiftType = TestSuite.ReturnTwo
    static func fromCpp(_ c: djinni.swift.AnyValue) -> SwiftType {
        return cppInterfaceToSwift(c, { ReturnTwoCppProxy(c) as SwiftType })
    }
    static func toCpp(_ s: SwiftType) -> djinni.swift.AnyValue {
        return swiftInterfaceToCpp(s, { fatalError("n/a") })
    }
}
public class ReturnTwo_statics {
    static func getInstance() throws -> TestSuite.ReturnTwo {
        var params = djinni.swift.ParameterList()
        var ret = djinni_generated.ReturnTwo_getInstance(&params)
        try handleCppErrors(&ret)
        return ReturnTwoMarshaller.fromCpp(ret)
    }
}
