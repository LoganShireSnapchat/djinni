// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from optionals.djinni

#pragma once

#include "djinni_support.hpp"
#include "mixed_record.hpp"

namespace djinni_generated {

class NativeMixedRecord final {
public:
    using CppType = ::testsuite::MixedRecord;
    using JniType = jobject;

    using Boxed = NativeMixedRecord;

    ~NativeMixedRecord();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeMixedRecord();
    friend ::djinni::JniClass<NativeMixedRecord>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/dropbox/djinni/test/MixedRecord") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Lcom/dropbox/djinni/test/OptionalInterface;ILcom/dropbox/djinni/test/BaseRecord;Lcom/dropbox/djinni/test/BaseRecord;)V") };
    const jfieldID field_mInterfaceVal { ::djinni::jniGetFieldID(clazz.get(), "mInterfaceVal", "Lcom/dropbox/djinni/test/OptionalInterface;") };
    const jfieldID field_mReqInt { ::djinni::jniGetFieldID(clazz.get(), "mReqInt", "I") };
    const jfieldID field_mOptRecord { ::djinni::jniGetFieldID(clazz.get(), "mOptRecord", "Lcom/dropbox/djinni/test/BaseRecord;") };
    const jfieldID field_mReqRecord { ::djinni::jniGetFieldID(clazz.get(), "mReqRecord", "Lcom/dropbox/djinni/test/BaseRecord;") };
};

} // namespace djinni_generated
