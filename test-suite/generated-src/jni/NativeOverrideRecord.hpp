// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from optionals.djinni

#pragma once

#include "djinni_support.hpp"
#include "override_record.hpp"

namespace djinni_generated {

class NativeOverrideRecord final {
public:
    using CppType = ::testsuite::OverrideRecord;
    using JniType = jobject;

    using Boxed = NativeOverrideRecord;

    ~NativeOverrideRecord();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeOverrideRecord();
    friend ::djinni::JniClass<NativeOverrideRecord>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/dropbox/djinni/test/OverrideRecord") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Ljava/lang/Integer;Ljava/lang/Float;ILjava/lang/Double;)V") };
    const jfieldID field_mOptInt { ::djinni::jniGetFieldID(clazz.get(), "mOptInt", "Ljava/lang/Integer;") };
    const jfieldID field_mOptFloat { ::djinni::jniGetFieldID(clazz.get(), "mOptFloat", "Ljava/lang/Float;") };
    const jfieldID field_mReqInt { ::djinni::jniGetFieldID(clazz.get(), "mReqInt", "I") };
    const jfieldID field_mOptDouble { ::djinni::jniGetFieldID(clazz.get(), "mOptDouble", "Ljava/lang/Double;") };
};

} // namespace djinni_generated
