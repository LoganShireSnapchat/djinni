// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from optionals.djinni

#pragma once

#include "djinni_support.hpp"
#include "optional_record.hpp"

namespace djinni_generated {

class NativeOptionalRecord final {
public:
    using CppType = ::testsuite::OptionalRecord;
    using JniType = jobject;

    using Boxed = NativeOptionalRecord;

    ~NativeOptionalRecord();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeOptionalRecord();
    friend ::djinni::JniClass<NativeOptionalRecord>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/dropbox/djinni/test/OptionalRecord") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Ljava/lang/Integer;Lcom/dropbox/djinni/test/OptionalInterface;Lcom/dropbox/djinni/test/BaseRecord;)V") };
    const jfieldID field_mOptInt { ::djinni::jniGetFieldID(clazz.get(), "mOptInt", "Ljava/lang/Integer;") };
    const jfieldID field_mOptInterface { ::djinni::jniGetFieldID(clazz.get(), "mOptInterface", "Lcom/dropbox/djinni/test/OptionalInterface;") };
    const jfieldID field_mOptRecord { ::djinni::jniGetFieldID(clazz.get(), "mOptRecord", "Lcom/dropbox/djinni/test/BaseRecord;") };
};

} // namespace djinni_generated
